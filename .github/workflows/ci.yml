name: CI

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.x'

      - name: Prepare Python packages
        run: |
          pip install -U pip
          pip install -U wheel
          pip install -U pyrogram tgcrypto

      - name: Retrieve version
        run: |
          prop_ver_name=`awk -F "=" '$1 == "appVerName" {print $2}' gradle.properties`
          prop_ver_code=`awk -F "=" '$1 == "appVerCode" {print $2}' gradle.properties`
          time=`TZ=UTC-8 date +%y%m%d%H`
          ver_name="${prop_ver_name}_T${time}"
          echo "VER_NAME=$ver_name" >> $GITHUB_ENV
          echo "VER_CODE=$prop_ver_code" >> $GITHUB_ENV

      - name: Gradle deps cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-deps

      - name: Gradle builds cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches/build-cache-*
          key: gradle-builds-${{ github.sha }}
          restore-keys: gradle-builds

      - name: Generate signing config
        run: |
          key_base64="${{ secrets.SIGNING_KEY }}"
          echo -n "$key_base64" | base64 -d > signing.jks
          echo "releaseStoreFile=signing.jks" >> gradle.properties
          echo "releaseStorePassword=android" >> gradle.properties
          echo "releaseKeyAlias=androiddebugkey" >> gradle.properties
          echo "releaseKeyPassword=android" >> gradle.properties

      - name: Build with Gradle
        run: ./gradlew --no-daemon --build-cache -PappVerName=$VER_NAME assembleRelease

      - name: Release module apk
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.HUB_TOKEN }}
          tag_name: ${{ format('v{0}', env.VER_NAME) }}
          name: ${{ env.VER_NAME }}
          body: 'CI版本，原版基础上添加繁体字幕简化功能'
          prerelease: false
          draft: false
          files: app/release/BiliRoamingX_${{ env.VER_NAME }}.apk

      - name: Send to Telegram
        if: success()
        shell: python
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
          CHANNEL_ID_ME: ${{ secrets.TELEGRAM_TO_ME }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          RUN_URL: ${{ format('{0}/{1}/actions/runs/{2}', github.server_url, github.repository, github.run_id) }}
        run: |
          import asyncio
          import inspect
          import os
          from pyrogram import Client
          from pyrogram.types.input_media import InputMediaDocument
          async def main():
            session = os.environ["SESSION"]
            bot = Client(
              "client",
              session_string=session,
            )
            async with bot:
              ver_name = os.environ["VER_NAME"]
              ver_code = os.environ["VER_CODE"]
              channel_id = int(os.environ["CHANNEL_ID"])
              channel_id_me = int(os.environ["CHANNEL_ID_ME"])
              msg_p1 = "#BiliRoaming"
              msg_p2 = "新CI版本漫游X！原版基础上添加繁体字幕简化功能"
              msg_p3 = f"BiliRoamingX: {ver_name} ({ver_code})"
              msg_p4 = f"Generated by [me]({os.environ['RUN_URL']})."
              caption = "{}\n{}\n\n{}\n{}".format(msg_p1, msg_p2, msg_p3, msg_p4)
              module = InputMediaDocument(media=f"app/release/BiliRoamingX_{ver_name}.apk", caption=caption)
              result = await bot.send_media_group(
                chat_id=channel_id_me,
                media=[module],
              )
              file_ids = [m.document.file_id for m in result]
              module.media = file_ids[0]
              await bot.send_media_group(
                chat_id=channel_id,
                media=[module],
              )
          async def wait():
            try:
              await asyncio.wait_for(main(), timeout=600)
            except asyncio.TimeoutError:
              print("message send timeout!!!")
              exit(1)
          asyncio.run(wait())
